package organization_http

import (
	core_database_postgres "github.com/gabrielmrtt/taski/internal/core/database/postgres"
	organization_database_postgres "github.com/gabrielmrtt/taski/internal/organization/database/postgres"
	organization_services "github.com/gabrielmrtt/taski/internal/organization/services"
	role_database_postgres "github.com/gabrielmrtt/taski/internal/role/database/postgres"
	user_database_postgres "github.com/gabrielmrtt/taski/internal/user/database/postgres"
	"github.com/gin-gonic/gin"
)

func BootstrapControllers(g *gin.RouterGroup) {
	organizationRepository := organization_database_postgres.NewOrganizationPostgresRepository()
	organizationUserRepository := organization_database_postgres.NewOrganizationUserPostgresRepository()
	roleRepository := role_database_postgres.NewRolePostgresRepository()
	userRepository := user_database_postgres.NewUserPostgresRepository()
	transactionRepository := core_database_postgres.NewTransactionPostgresRepository()

	createOrganizationService := organization_services.NewCreateOrganizationService(organizationRepository, organizationUserRepository, roleRepository, userRepository, transactionRepository)
	getOrganizationService := organization_services.NewGetOrganizationService(organizationRepository)
	listOrganizationsService := organization_services.NewListOrganizationsService(organizationRepository)
	updateOrganizationService := organization_services.NewUpdateOrganizationService(organizationRepository, transactionRepository)
	deleteOrganizationService := organization_services.NewDeleteOrganizationService(organizationRepository, transactionRepository)
	inviteUserToOrganizationService := organization_services.NewInviteUserToOrganizationService(organizationRepository, organizationUserRepository, userRepository, roleRepository, transactionRepository)
	removeUserFromOrganizationService := organization_services.NewRemoveUserFromOrganizationService(organizationRepository, organizationUserRepository, userRepository, transactionRepository)
	acceptOrganizationUserInvitationService := organization_services.NewAcceptOrganizationUserInvitationService(organizationRepository, userRepository, transactionRepository)
	refuseOrganizationUserInvitationService := organization_services.NewRefuseOrganizationUserInvitationService(organizationRepository, organizationUserRepository, userRepository, transactionRepository)
	listOrganizationUsersService := organization_services.NewListOrganizationUsersService(organizationUserRepository)
	getOrganizationUserService := organization_services.NewGetOrganizationUserService(organizationUserRepository)
	updateOrganizationUserService := organization_services.NewUpdateOrganizationUserService(organizationUserRepository, roleRepository, transactionRepository)
	listMyOrganizationInvitesService := organization_services.NewListMyOrganizationInvitesService(organizationRepository)

	organizationController := NewOrganizationController(listOrganizationsService, getOrganizationService, createOrganizationService, updateOrganizationService, deleteOrganizationService)
	organizationUserController := NewOrganizationUserController(listOrganizationUsersService, inviteUserToOrganizationService, removeUserFromOrganizationService, getOrganizationUserService, updateOrganizationUserService)
	OrganizationInvitesController := NewOrganizationInvitesController(listMyOrganizationInvitesService, acceptOrganizationUserInvitationService, refuseOrganizationUserInvitationService)

	organizationController.ConfigureRoutes(g)
	organizationUserController.ConfigureRoutes(g)
	OrganizationInvitesController.ConfigureRoutes(g)
}
